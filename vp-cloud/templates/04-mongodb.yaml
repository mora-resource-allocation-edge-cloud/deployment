apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.mongodb.serviceName }}
spec:
  ports:
    - port: 27017
  selector:
    app: mongodb
  {{- if eq .Values.isOpenShift "true"}}
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    deployment: mongodb
  name: mongodb
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    app: mongodb
  strategy:
    activeDeadlineSeconds: 21600
    recreateParams:
      timeoutSeconds: 600
    resources: {}
    type: Recreate
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - env:
            - name: MONGODB_USER
              value: {{ .Values.mongodb.username }}
            - name: MONGODB_PASSWORD
              value: {{ .Values.mongodb.password }}
            - name: MONGODB_ADMIN_PASSWORD
              value: {{ .Values.mongodb.password }}
            - name: MONGODB_DATABASE
              value: {{ .Values.mongodb.databaseName }}
          image: >-
          {{.Values.images.mongoDb}}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: mongodb
          ports:
            - containerPort: 27017
              protocol: TCP
          readinessProbe:
            exec: # /bin/sh -i -c "mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval=\"db.createCollection('video', {capped: true, size: 1024000, max: 10})\""
              command:
                - /bin/sh
                - '-i'
                - '-c'
                - >-
                  mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval="db.createCollection('video', {capped: true, size: 1024000, max: {{.Values.vms.maxVideo}}})";
                #    mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval="quit()"
            failureThreshold: 3
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/lib/mongodb/data
              name: data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mongodb-data
  test: false
  triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - mongodb
        from:
          kind: ImageStreamTag
          name: 'mongodb:3.2'
          namespace: openshift
        lastTriggeredImage: >-
          docker-registry.default.svc:5000/openshift/mongodb@sha256:2dbca138ad89de50c84befe6fefc9293ce4437904b84a4b8200b649594e5a4f1
      type: ImageChange
    - type: ConfigChange
  {{- else }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    deployment: mongodb-deployment
  name: mongodb
spec:
  replicas: {{ .Values.mongodb.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - env:
            - name: MONGODB_USERNAME
              value: {{ .Values.mongodb.username }}
            - name: MONGODB_PASSWORD
              value: {{ .Values.mongodb.password }}
            - name: MONGODB_ADMIN_PASSWORD
              value: {{ .Values.mongodb.password }}
            - name: MONGODB_DATABASE
              value: {{ .Values.mongodb.databaseName }}
          image:
                >-
            {{.Values.images.mongoDb}}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: mongodb
          ports:
            - containerPort: 27017
              protocol: TCP
          readinessProbe:
            exec: # /bin/sh -i -c "mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval=\"db.createCollection('video', {capped: true, size: 1024000, max: 10})\""
             command:
                - /bin/sh
                - '-i'
                - '-c'
                - >-
                   mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USERNAME -p $MONGODB_PASSWORD --eval="quit()";
            failureThreshold: 3
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            {{- toYaml .Values.resources.mongodb| nindent 12 }}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/lib/mongodb/data
              name: data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mongodb-data
          hostPath:
            path: /var/mongodb
            type: DirectoryOrCreate
  {{- end }}
